package FantasyFootballManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FantasyFootballApp {

    private List<Player> availablePlayers = new ArrayList<>();
    private List<FantasyTeam> fantasyTeams = new ArrayList<>();
    private JFrame frame;
    private JTextArea standingsArea;
    private JTextArea playerInfoArea;

    public FantasyFootballApp() {
        frame = new JFrame("Fantasy Football Manager");
        frame.setSize(800, 700);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new FlowLayout());

        availablePlayers.add(new Player("Van Anh", "Forward", 10));
        availablePlayers.add(new Player("Van Duoc", "Forward", 20));
        availablePlayers.add(new Player("Thanh Long", "Midfielder", 14));
        availablePlayers.add(new Player("Ngoc Tu", "Defender", 11));
        availablePlayers.add(new Player("Trong Tin", "Goalkeeper", 10));
        availablePlayers.add(new Player("Cong Minh", "Head Coach", 15));
        availablePlayers.add(new Player("Tuan Phong", "Defensive Midfielder", 10));
        availablePlayers.add(new Player("Minh Duc", "Winger", 11));
        availablePlayers.add(new Player("Phan Binh", "Striker", 14));
        JTextField teamNameField = new JTextField(15);
        JButton createTeamButton = new JButton("Create Team");
        JButton buyPlayerButton = new JButton("Buy Player");
        JButton assignCoachButton = new JButton("Assign Coach");
        JButton updateGoalsButton = new JButton("Update Goals");
        JButton showTopScorerButton = new JButton("Show Top Scorer");
        JButton showMyPlayersButton = new JButton("Show My Players");
        JComboBox<String> playerDropdown = new JComboBox<>(availablePlayers.stream().map(p -> p.name).toArray(String[]::new));

        standingsArea = new JTextArea(30, 50);
        standingsArea.setEditable(false);
        standingsArea.setFont(new Font("Monospaced", Font.BOLD, 12));
        JScrollPane scrollPane = new JScrollPane(standingsArea);

        playerInfoArea = new JTextArea(5, 50);
        playerInfoArea.setEditable(false);
        JScrollPane playerInfoScroll = new JScrollPane(playerInfoArea);

        createTeamButton.addActionListener(e -> {
            String name = JOptionPane.showInputDialog(frame, "Enter Team Name:");
            if (name != null && !name.trim().isEmpty()) {
                fantasyTeams.add(new FantasyTeam(name, 500));
                updateStandings();
            }
        });

        buyPlayerButton.addActionListener(e -> {
            String playerName = (String) playerDropdown.getSelectedItem();
            Player player = availablePlayers.stream().filter(p -> p.name.equals(playerName)).findFirst().orElse(null);

            if (player != null && !fantasyTeams.isEmpty() && !player.position.equals("Head Coach")) {
                int confirm = JOptionPane.showConfirmDialog(frame,
                        "Do you want to buy " + playerName + "?",
                        "Confirm Purchase", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    fantasyTeams.get(fantasyTeams.size() - 1).addPlayer(player);
                    updateStandings();
                }
            }
        });

        assignCoachButton.addActionListener(e -> {
            String playerName = (String) playerDropdown.getSelectedItem();
            Player coach = availablePlayers.stream().filter(p -> p.name.equals(playerName) && p.position.equals("Head Coach")).findFirst().orElse(null);

            if (coach != null && !fantasyTeams.isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(frame,
                        "Do you want to assign " + playerName + " as the coach?",
                        "Assign Coach", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    fantasyTeams.get(fantasyTeams.size() - 1).setCoach(coach);
                    updateStandings();
                }
            }
        });

        updateGoalsButton.addActionListener(e -> {
            String playerName = (String) playerDropdown.getSelectedItem();

            String goalsInput = JOptionPane.showInputDialog(frame,
                    "Enter number of goals for " + playerName + ":");

            if (goalsInput != null) {
                try {
                    int goals = Integer.parseInt(goalsInput);
                    for (FantasyTeam team : fantasyTeams) {
                        for (Player player : team.players) {
                            if (player.name.equals(playerName)) {
                                player.updateGoals(goals);
                            }
                        }
                    }
                    updateStandings();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "Please enter a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        showTopScorerButton.addActionListener(e -> {
            Player topScorer = availablePlayers.stream()
                    .max((p1, p2) -> Integer.compare(p1.goals, p2.goals))
                    .orElse(null);

            if (topScorer != null) {
                JOptionPane.showMessageDialog(frame,
                        "Top Scorer: " + topScorer.name + " with " + topScorer.goals + " goals.");
            }
        });
        showMyPlayersButton.addActionListener(e -> {
            if (fantasyTeams.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "No team has been created yet!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            FantasyTeam latestTeam = fantasyTeams.get(fantasyTeams.size() - 1);
            StringBuilder playerList = new StringBuilder("Players in " + latestTeam.name + ":\n");

            if (latestTeam.players.isEmpty()) {
                playerList.append("No players have been bought yet!");
            } else {
                for (Player p : latestTeam.players) {
                    playerList.append("- ").append(p.name).append(" (").append(p.position).append(")\n");
                }
            }

            JOptionPane.showMessageDialog(frame, playerList.toString(), "My Players", JOptionPane.INFORMATION_MESSAGE);
        });
        frame.add(showTopScorerButton);
        frame.add(new JLabel("Team Name:"));
        frame.add(createTeamButton);
        frame.add(new JLabel("Select Player:"));
        frame.add(playerDropdown);
        frame.add(buyPlayerButton);
        frame.add(assignCoachButton);
        frame.add(new JLabel("Update Goals:"));
        frame.add(updateGoalsButton);
        frame.add(showMyPlayersButton);
        frame.add(scrollPane);
        frame.setVisible(true);
    }

    private void updateStandings() {
        StringBuilder sb = new StringBuilder();
        for (FantasyTeam team : fantasyTeams) {
            sb.append(team.toString()).append("\n\n");
            for (Player player : team.players) {
                sb.append(" - ").append(player.name).append(" (Goals: ").append(player.goals).append(")\n");
            }
        }

        standingsArea.setText(sb.toString());
        playerInfoArea.setText(sb.toString());
    }

    public static void main(String[] args) {
        new FantasyFootballApp();
    }
}
